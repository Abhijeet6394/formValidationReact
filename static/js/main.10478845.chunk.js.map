{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","_useState","useState","_useState2","Object","slicedToArray","user","setUser","_useState3","_useState4","password","setPassword","_useState5","_useState6","userErr","setUserErr","_useState7","_useState8","passErr","setPassErr","react_default","a","createElement","onSubmit","e","length","alert","preventDefault","type","placeholder","onChange","item","target","value","App","className","src_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA4DeA,MA3Df,WAAiB,IAAAC,EACQC,mBAAS,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACDI,EADCJ,EAAA,GAAAK,EAEgBN,mBAAS,IAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GAAAG,EAGcV,oBAAS,GAHvBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGEE,EAHFF,EAAA,GAAAG,EAIcd,oBAAS,GAJvBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIEE,EAJFF,EAAA,GA4Cb,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACDF,EAAAC,EAAAC,cAAA,QAAMC,SAzCf,SAAqBC,GAEZlB,EAAKmB,OAAO,GAAKf,EAASe,OAAO,EAEhCC,MAAM,uBAINA,MAAM,eAGVF,EAAEG,mBA+BCP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,YAAY,gBAAgBC,SA7BtD,SAAqBN,GACjB,IAAIO,EAAKP,EAAEQ,OAAOC,MACfF,EAAKN,OAAO,EAEZV,GAAW,GAIVA,GAAW,GAEfR,EAAQwB,MAmBoEjB,EAAQM,EAAAC,EAAAC,cAAA,8BAA4B,GAC5GF,EAAAC,EAAAC,cAAA,WAFD,IAEQF,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWC,YAAY,sBAAsBC,SAnBjE,SAAyBN,GACrB,IAAIO,EAAKP,EAAEQ,OAAOC,MACfF,EAAKN,OAAO,EAEZN,GAAW,GAIVA,GAAW,GAEfR,EAAYoB,MAS8Eb,EAAQE,EAAAC,EAAAC,cAAA,kCAAgC,GAE9HF,EAAAC,EAAAC,cAAA,WALD,IAKQF,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,YC1CGM,MATf,WAEE,OACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACc,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10478845.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nfunction Login() {\r\n    const [user,setUser]=useState(\"\");\r\n    const [password,setPassword]=useState(\"\");\r\n    const [userErr,setUserErr]=useState(false);\r\n    const [passErr,setPassErr]=useState(false);\r\n\r\n  function loginHandle(e)\r\n    {\r\n        if(user.length<3 || password.length<3)\r\n        {\r\n            alert(\"type correct values\")\r\n        }\r\n        else\r\n        {\r\n            alert(\"all good :)\")\r\n        }\r\n\r\n        e.preventDefault()\r\n    }\r\n    function userHandler(e){\r\n        let item=e.target.value;\r\n        if(item.length<3 )\r\n        {\r\n           setUserErr(true)\r\n        }\r\n        else\r\n        {\r\n            setUserErr(false)\r\n        }\r\n        setUser(item)\r\n    }\r\n    function passwordHandler(e){\r\n        let item=e.target.value;\r\n        if(item.length<3 )\r\n        {\r\n           setPassErr(true)\r\n        }\r\n        else\r\n        {\r\n            setPassErr(false)\r\n        }\r\n        setPassword(item)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n           <form onSubmit={loginHandle}>\r\n           <input type=\"text\" placeholder=\"Enter User Id\" onChange={userHandler} />{userErr?<span>User Not Valid</span>:\"\"}\r\n            <br /> <br />\r\n            <input type=\"password\" placeholder=\"Enter User Password\" onChange={passwordHandler}/>{passErr?<span>Password Not Valid</span>:\"\"}\r\n\r\n            <br /> <br />\r\n            <button type=\"submit\"  >Login</button>\r\n           </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Login from './Login'\nfunction App() {\n  //const data = true;\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}